import os
import sys
import time
import random
import requests

# Animated printing
def slow_print(text, delay=0.03):
    for char in text:
        sys.stdout.write(char)
        sys.stdout.flush()
        time.sleep(delay)
    print()

def enhanced_loading(text="Loading", dots=3, delay=0.4):
    for i in range(dots):
        sys.stdout.write(f"\r{text}{'.' * (i + 1)} ")
        sys.stdout.flush()
        time.sleep(delay)
    print("\n")

def rainbow_text(text):
    colors = ['\033[91m', '\033[93m', '\033[92m', '\033[96m', '\033[94m', '\033[95m']
    result = ''
    for i, char in enumerate(text):
        result += colors[i % len(colors)] + char
    result += '\033[0m'
    return result

def glowing_choice(choice):
    print(f"\033[1;36m[•] You Selected: {choice}\033[0m\n")

logo = r'''
██████╗  █████╗ ██████╗  █████╗ 
██╔══██╗██╔══██╗██╔══██╗██╔══██╗
██████╔╝███████║██████╔╝███████║
██╔═══╝ ██╔══██║██╔═══╝ ██╔══██║
██║     ██║  ██║██║     ██║  ██║
╚═╝     ╚═╝  ╚═╝╚═╝     ╚═╝  ╚═╝

    [ BABA Card Intelligence Tool v1.0 ]
'''
menu = '''\033[1;34m
-----------------------------------------
1. Check Card: VBV or Non-VBV
2. BIN Lookup: Issuer Info & Country
3. Card Type & Validation
4. Balance Inquiry
5. 3D Secure Status Checker
6. Card Risk Score Analyzer
7. Live/Dead Card Status
8. BIN Reverser: Find Similar Cards
9. Proxy Scraper Module
10. Combo Validator (Full Format)
11. CVV Detection Engine
12. Gateway Emulator
13. Anti-Ban Shield AI v2.1
q. Quit
-----------------------------------------\033[0m
'''

def approval():
    os.system("clear")
    print(rainbow_text(logo))
    user_id = str(os.geteuid()) + str(os.getlogin())
    token = "-".join(user_id)

    try:
        response = requests.get("https://github.com/BABASEc1/Crown/blob/main/Apv.txt")
        if token in response.text:
            slow_print("\033[1;32m[+] KEY APPROVED. Access Granted.\033[0m")
            time.sleep(1)
        else:
            print("\033[1;31m[!] Your Key Is Not Approved.\033[0m")
            print("\033[1;33m[!] Your Key: " + token)
            print("\033[1;34m[!] Press Enter And Contact Admin To Approve Your Key\033[0m")
            os.system(f'am start https://t.me/@BABASEc2?text=Hello%20Admin%2C%20Please%20Approve%20My%20Key:%20{token}')
            sys.exit()
    except:
        print("\033[1;31m[!] Unable to verify key. Check internet connection.\033[0m")
        sys.exit()

def check_vbv(card): enhanced_loading("Checking VBV Status"); print("[+] Status:", random.choice(["VBV", "Non-VBV"]))
def bin_lookup(card): print(f"[+] BIN: {card[:6]}\n[+] Country: US\n[+] Bank: BankCorp")
def validate_card(card): enhanced_loading("Validating Card"); print("[+] Format: VALID\n[+] Luhn Check: PASS")
def balance_inquiry(card): print(f"[+] Balance: ${round(random.uniform(10.00, 5000.00), 2)} USD")
def check_3ds(card): print("[+] 3D Secure:", random.choice(["Enabled", "Disabled"]))
def risk_score(card): print(f"[+] Risk Score: {random.randint(30, 95)}%")
def live_status(card): print("[+] Card Status: LIVE")
def bin_reverser(card): print("[+] Similar BINs Found:"); [print(" -", card[:6] + "******" + str(random.randint(1000, 9999))) for _ in range(3)]
def proxy_scraper(): print("[+] Scraped 30 proxies successfully.")
def combo_validator(card, exp, cvv, zip): print("[+] Combo Valid | Format OK")
def cvv_engine(card): print("[+] CVV Verification: PASS")
def gateway_emulator(card): print("[+] AUTH Approved | Code 00")
def anti_ban(): print("[+] Anti-Ban Activated | IP Rotate Enabled")

def cardra():
    approval()
    card = ""
    exp = ""
    cvv = ""
    zip_code = ""

    while True:
        os.system("clear")
        print(rainbow_text(logo))
        print(menu)

        choice = input("Select Option: ").strip()
        glowing_choice(choice)

        if choice in ['1','2','3','4','5','6','7','8','10','11','12']:
            if not card:
                print("\033[1;36mEnter Card Details:\033[0m")
                card = input("Card Number: ").strip()
                exp = input("Expiry (MM/YY): ").strip()
                cvv = input("CVV: ").strip()
                zip_code = input("ZIP Code: ").strip()
                enhanced_loading("Verifying Details")

        if choice == '1': check_vbv(card)
        elif choice == '2': bin_lookup(card)
        elif choice == '3': validate_card(card)
        elif choice == '4': balance_inquiry(card)
        elif choice == '5': check_3ds(card)
        elif choice == '6': risk_score(card)
        elif choice == '7': live_status(card)
        elif choice == '8': bin_reverser(card)
        elif choice == '9': proxy_scraper()
        elif choice == '10': combo_validator(card, exp, cvv, zip_code)
        elif choice == '11': cvv_engine(card)
        elif choice == '12': gateway_emulator(card)
        elif choice == '13': anti_ban()
        elif choice.lower() == 'q':
            print("\033[1;32mExiting...\033[0m")
            break
        else:
            print("\033[1;31mInvalid Choice!\033[0m")

        input("\nPress Enter to return to menu...")

cardra()
